# Test generated by RoostGPT for test python-django using AI Type Vertex AI and AI Model code-bison-32k

import unittest
from django.test import TestCase
from django.urls import reverse
from views import get_success_url, PostUpdateView, PostDeleteView


class TestGetSuccessUrl(unittest.TestCase):

    def test_get_success_url_success(self):
        post = Post.objects.create(
            category_id=1,
            title='Test Post',
            slug='test-post',
            content='Test content'
        )
        self.assertEqual(get_success_url(self, post), reverse('posts:postDetail', args=('test-category', post.pk, 'test-post')))

    def test_get_success_url_failure(self):
        self.assertRaises(Http404, get_success_url, self, None)

    def test_post_update_view_success(self):
        post = Post.objects.create(
            category_id=1,
            title='Test Post',
            slug='test-post',
            content='Test content'
        )
        response = self.client.post(reverse('posts:postUpdate', args=(post.pk,)), {'category': post.category.id, 'tags': post.tags.all(), 'title': 'Updated title', 'image': post.image, 'content': 'Updated content'})
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response.url, reverse('posts:postDetail', args=('test-category', post.pk, 'test-post')))

    def test_post_update_view_failure(self):
        post = Post.objects.create(
            category_id=1,
            title='Test Post',
            slug='test-post',
            content='Test content'
        )
        response = self.client.post(reverse('posts:postUpdate', args=(post.pk,)), {'category': post.category.id, 'tags': post.tags.all(), 'title': 'Updated title', 'image': post.image, 'content': 'Updated content', 'non_existing_field': 'Non existing field'})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'This field is required.')

    def test_post_delete_view_success(self):
        post = Post.objects.create(
            category_id=1,
            title='Test Post',
            slug='test-post',
            content='Test content'
        )
        response = self.client.post(reverse('posts:postDelete', args=(post.pk,)), {'category': post.category.id, 'tags': post.tags.all(), 'title': 'Updated title', 'image': post.image, 'content': 'Updated content'})
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response.url, reverse('user:viewProfile'))

    def test_post_delete_view_failure(self):
        post = Post.objects.create(
            category_id=1,
            title='Test Post',
            slug='test-post',
            content='Test content'
        )
        response = self.client.post(reverse('posts:postDelete', args=(post.pk,)), {'category': post.category.id, 'tags': post.tags.all(), 'title': 'Updated title', 'image': post.image, 'content': 'Updated content', 'non_existing_field': 'Non existing field'})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'This field is required.')


