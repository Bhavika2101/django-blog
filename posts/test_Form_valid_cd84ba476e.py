# Test generated by RoostGPT for test python-django using AI Type Vertex AI and AI Model code-bison-32k

import unittest
from views import form_valid

class TestFormValid(unittest.TestCase):

    def test_Form_valid_cd84ba476e(self):
        form = form_valid(self)
        form.instance.author = self.request.user
        form.instance.post_id = self.kwargs['pk']
        messages.success(self.request, 'Comment successfully added.')
        self.assertTrue(super().form_valid(form))

    def test_Form_valid_cd84ba476e_fail(self):
        form = form_valid(self)
        form.instance.author = self.request.user
        form.instance.post_id = self.kwargs['pk']
        messages.error(self.request, 'Comment not added.')
        self.assertFalse(super().form_valid(form))

    def test_Form_valid_slug(self):
        post = form_valid(self)
        post.slug = slugify(post.title)
        counter = 1
        temp_slug = post.slug
        dbpost = Post.objects.get(id=post.id)
        if dbpost.title != post.title:  # Do these if the title of the post has changed
            while Post.objects.filter(
                    slug=post.slug).exists():  # If there is the same information in the database, it is created by adding 1 to the end.
                post.slug = '{}-{}'.format(temp_slug, counter)
                counter += 1
        self.assertTrue(post.slug)

    def test_form_valid_update(self):
        post = form_valid(self)
        post.title = "Updated title"
        post.slug = slugify(post.title)
        counter = 1
        temp_slug = post.slug
        dbpost = Post.objects.get(id=post.id)
        if dbpost.title != post.title:  # Do these if the title of the post has changed
            while Post.objects.filter(
                    slug=post.slug).exists():  # If there is the same information in the database, it is created by adding 1 to the end.
                post.slug = '{}-{}'.format(temp_slug, counter)
                counter += 1
        form.save()
        messages.success(self.request, 'Your post has been successfully updated.')
        self.assertTrue(super().form_valid(form))

