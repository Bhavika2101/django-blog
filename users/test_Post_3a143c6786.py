# Test generated by RoostGPT for test python-django using AI Type Vertex AI and AI Model code-bison-32k

import unittest
from django.contrib import messages
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.models import User
from django.contrib.auth.views import PasswordChangeView
from django.db.models import Count
from django.http import HttpResponseRedirect
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import TemplateView
from django.views.generic.detail import DetailView
from django.views.generic.list import ListView, MultipleObjectMixin
from posts.models import Post, Category, Tag
from .forms import UserDetailForm, UserForm
from .views import UpdateProfile

class TestUpdateProfile(unittest.TestCase):

    def test_post_success(self):
        post_data = {
            'username': 'test_user',
            'email': 'test_user@example.com',
            'first_name': 'Test',
            'last_name': 'User',
            'bio': 'This is a test bio.',
            'location': 'Test Location',
            'profile_pic': 'test_pic.jpg',
        }
        file_data = {
            'profile_pic': 'test_pic.jpg',
        }
        request = MockRequest(POST=post_data, FILES=file_data)
        request.user = User.objects.create_user(username='test_user', email='test_user@example.com', password='test_password')
        response = UpdateProfile.as_view()(request)
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response.url, reverse_lazy('user:updateProfile'))
        self.assertEqual(messages.get_messages(request)[0].message, 'Your profile was successfully updated!')

    def test_post_failure(self):
        post_data = {
            'username': 'test_user',
            'email': 'test_user@example.com',
            'first_name': 'Test',
            'last_name': 'User',
            'bio': 'This is a test bio.',
            'location': 'Test Location',
            'profile_pic': 'test_pic.jpg',
        }
        file_data = {
            'profile_pic': 'test_pic.jpg',
        }
        request = MockRequest(POST=post_data, FILES=file_data)
        request.user = User.objects.create_user(username='test_user', email='test_user@example.com', password='test_password')
        user_form = UserForm(post_data, instance=request.user)
        user_form.errors['username'] = ['This username is already taken.']
        response = UpdateProfile.as_view()(request)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context_data['user_form'], user_form)
        self.assertEqual(response.context_data['profile_form'], ProfileForm(post_data, file_data, instance=request.user.userdetail))

