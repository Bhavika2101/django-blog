# Test generated by RoostGPT for test python-django using AI Type Vertex AI and AI Model code-bison-32k

# Test generated by RoostGPT for test python-django using AI Type Vertex AI and AI Model code-bison-32k

import unittest
from django.contrib.auth.models import User
from django.test import TestCase
from django.urls import reverse
from posts.models import Post, Category, Tag
from .views import ProfileDetailView, PasswordsChangeView


class TestGetContextData(unittest.TestCase):

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='123456')
        self.client.login(username='testuser', password='123456')
        self.post = Post.objects.create(title='Test Post', content='Test Content', available=True, author=self.user)
        self.category = Category.objects.create(name='Test Category')
        self.tag = Tag.objects.create(name='Test Tag')

    def test_get_context_data_success(self):
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.status_code, 200)
        self.assertIn('object_list', response.context)
        self.assertIn('popularposts', response.context)
        self.assertIn('categories', response.context)
        self.assertIn('tags', response.context)

    def test_get_context_data_failure(self):
        response = self.client.get(reverse('user:viewProfile'), {'available': 'False'})
        self.assertEqual(response.status_code, 404)

    def test_get_context_data_edge_case(self):
        response = self.client.get(reverse('user:viewProfile'), {'author': 'testuser2'})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['object_list'].count(), 0)

    def test_get_context_data_error_handling(self):
        response = self.client.get(reverse('user:viewProfile'), {'author': 'testuser3'})
        self.assertEqual(response.status_code, 404)

class TestPasswordsChangeView(TestCase):

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='123456')
        self.client.login(username='testuser', password='123456')

    def test_passwords_change_view_success(self):
        response = self.client.post(reverse('user:changePassword'), {'old_password': '123456', 'new_password1': '654321', 'new_password2': '654321'})
        self.assertEqual(response.status_code, 302)
        self.assertRedirects(response, reverse('user:viewProfile'))

    def test_passwords_change_view_failure(self):
        response = self.client.post(reverse('user:changePassword'), {'old_password': '123456', 'new_password1': '654321', 'new_password2': '123456'})
        self.assertEqual(response.status_code, 200)
        self.assertFormError(response, 'form', 'new_password2', 'The two password fields didn\'t match.')

    def test_passwords_change_view_edge_case(self):
        response = self.client.post(reverse('user:changePassword'), {'old_password': '123456', 'new_password1': '654321', 'new_password2': '654321'})
        self.assertEqual(response.status_code, 302)
        self.assertRedirects(response, reverse('user:viewProfile'))

    def test_passwords_change_view_error_handling(self):
        response = self.client.post(reverse('user:changePassword'), {'old_password': '123456', 'new_password1': '654321', 'new_password2': '654321'})
        self.assertEqual(response.status_code, 302)
        self.assertRedirects(response, reverse('user:viewProfile'))

class TestAuthorDetailView(TestCase):

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='123456')
        self.client.login(username='testuser', password='123456')
        self.post = Post.objects.create(title='Test Post', content='Test Content', available=True, author=self.user)
        self.category = Category.objects.create(name='Test Category')
        self.tag = Tag.objects.create(name='Test Tag')

    def test_author_detail_view_success(self):
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.status_code, 200)
        self.assertIn('object_list', response.context)
        self.assertIn('popularposts', response.context)
        self.assertIn('categories', response.context)
        self.assertIn('tags', response.context)

    def test_author_detail_view_failure(self):
        response = self.client.get(reverse('user:viewProfile'), {'available': 'False'})
        self.assertEqual(response.status_code, 404)

    def test_author_detail_view_edge_case(self):
        response = self.client.get(reverse('user:viewProfile'), {'author': 'testuser2'})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['object_list'].count(), 0)

    def test_author_detail_view_error_handling(self):
        response = self.client.get(reverse('user:viewProfile'), {'author': 'testuser3'})
        self.assertEqual(response.status_code, 404)

    def test_get_context_data_success_with_popularposts(self):
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.status_code, 200)
        self.assertIn('popularposts', response.context)
        self.assertEqual(len(response.context['popularposts']), 3)

    def test_get_context_data_failure_with_popularposts(self):
        response = self.client.get(reverse('user:viewProfile'), {'available': 'False'})
        self.assertEqual(response.status_code, 404)
        self.assertNotIn('popularposts', response.context)

    def test_get_context_data_edge_case_with_popularposts(self):
        response = self.client.get(reverse('user:viewProfile'), {'author': 'testuser2'})
        self.assertEqual(response.status_code, 200)
        self.assertIn('popularposts', response.context)
        self.assertEqual(len(response.context['popularposts']), 3)

    def test_get_context_data_error_handling_with_popularposts(self):
        response = self.client.get(reverse('user:viewProfile'), {'author': 'testuser3'})
        self.assertEqual(response.status_code, 404)
        self.assertNotIn('popularposts', response.context)

