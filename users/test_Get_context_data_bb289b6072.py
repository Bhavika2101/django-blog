# Test generated by RoostGPT for test python-django using AI Type Vertex AI and AI Model code-bison-32k

# Test generated by RoostGPT for test python-django using AI Type Vertex AI and AI Model code-bison-32k

import unittest
from django.test import TestCase
from django.contrib.auth.models import User
from django.urls import reverse
from posts.models import Post, Category, Tag
from views import get_context_data


class ProfileDetailViewTestCase(TestCase):

    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='12345')
        self.client.login(username='testuser', password='12345')

    def test_Get_context_data_bb289b6072_Success(self):
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.status_code, 200)
        self.assertTrue('object_list' in response.context)
        self.assertTrue('popularposts' in response.context)
        self.assertTrue('categories' in response.context)
        self.assertTrue('tags' in response.context)

    def test_Get_context_data_bb289b6072_No_Posts(self):
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['object_list'].count(), 0)

    def test_Get_context_data_bb289b6072_Invalid_User(self):
        self.client.logout()
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.status_code, 302)

    def test_Get_context_data_bb289b6072_Popular_Posts_Count(self):
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.context['popularposts'].count(), 3)

    def test_Get_context_data_bb289b6072_Categories_Count(self):
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.context['categories'].count(), Category.objects.all().count())

    def test_Get_context_data_bb289b6072_Tags_Count(self):
        response = self.client.get(reverse('user:viewProfile'))
        self.assertEqual(response.context['tags'].count(), Tag.objects.all().count())

    def test_Get_context_data_bb289b6072_Popular_Posts_Are_Available(self):
        response = self.client.get(reverse('user:viewProfile'))
        for post in response.context['popularposts']:
            self.assertTrue(post.available)

    def test_Get_context_data_bb289b6072_Categories_Are_Available(self):
        response = self.client.get(reverse('user:viewProfile'))
        for category in response.context['categories']:
            self.assertTrue(category.available)

    def test_Get_context_data_bb289b6072_Tags_Are_Available(self):
        response = self.client.get(reverse('user:viewProfile'))
        for tag in response.context['tags']:
            self.assertTrue(tag.available)

