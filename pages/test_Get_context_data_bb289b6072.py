# Test generated by RoostGPT for test python-django using AI Type Vertex AI and AI Model code-bison-32k

import random
from django.contrib import messages
from django.db.models import Count
from django.shortcuts import render
from django.template import RequestContext
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.views.generic.list import ListView
from posts.models import Post, Category, Tag
from django.core.mail import send_mail, EmailMultiAlternatives
from django.conf import settings.
from .views import AboutView


class TestGetContextData(TestCase):

    def setUp(self):
        self.view = AboutView()

    def test_Get_context_data_bb289b6072(self):
        # Test for random posts
        Post.objects.create(title='Test Post 1', slug='test-post-1', content='Test content 1', available=True)
        Post.objects.create(title='Test Post 2', slug='test-post-2', content='Test content 2', available=True)
        Post.objects.create(title='Test Post 3', slug='test-post-3', content='Test content 3', available=True)
        Post.objects.create(title='Test Post 4', slug='test-post-4', content='Test content 4', available=True)
        context = self.view.get_context_data()
        self.assertEqual(len(context['randomposts']), 3)

        # Test for popular posts
        Post.objects.create(title='Test Post 5', slug='test-post-5', content='Test content 5', available=True, views=100)
        Post.objects.create(title='Test Post 6', slug='test-post-6', content='Test content 6', available=True, views=50)
        Post.objects.create(title='Test Post 7', slug='test-post-7', content='Test content 7', available=True, views=25)
        context = self.view.get_context_data()
        self.assertEqual(len(context['popularposts']), 3)
        self.assertEqual(context['popularposts'][0].title, 'Test Post 5')
        self.assertEqual(context['popularposts'][1].title, 'Test Post 6')
        self.assertEqual(context['popularposts'][2].title, 'Test Post 7')

        # Test for categories and tags
        Category.objects.create(name='Test Category 1', slug='test-category-1')
        Category.objects.create(name='Test Category 2', slug='test-category-2')
        Tag.objects.create(name='Test Tag 1', slug='test-tag-1')
        Tag.objects.create(name='Test Tag 2', slug='test-tag-2')
        context = self.view.get_context_data()
        self.assertEqual(len(context['categories']), 2)
        self.assertEqual(len(context['tags']), 2)

    def test_Get_context_data_empty(self):
        # Test for empty random posts
        context = self.view.get_context_data()
        self.assertEqual(len(context['randomposts']), 0)

        # Test for empty popular posts
        context = self.view.get_context_data()
        self.assertEqual(len(context['popularposts']), 0)

        # Test for empty categories and tags
        context = self.view.get_context_data()
        self.assertEqual(len(context['categories']), 0)
        self.assertEqual(len(context['tags']), 0)

    def test_Get_context_data_with_no_posts(self):
        # Test for no posts
        context = self.view.get_context_data()
        self.assertEqual(len(context['randomposts']), 0)
        self.assertEqual(len(context['popularposts']), 0)
        self.assertEqual(len(context['categories']), 0)
        self.assertEqual(len(context['tags']), 0)

